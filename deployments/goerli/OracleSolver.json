{
  "address": "0x311e45bcB83De7ba88960e6436B63D813b6Ef5b8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "solver",
          "type": "address"
        }
      ],
      "name": "addContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "tokensPricer",
      "outputs": [
        {
          "internalType": "contract PriceConsumerV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "tokensSolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfad233e4cae802ca5e588ec20e5454c86e273f39b627382b149767976ed4e7cc",
  "receipt": {
    "to": null,
    "from": "0x622aE944B971218d63108dE4f6c71A8A8A1cE016",
    "contractAddress": "0x311e45bcB83De7ba88960e6436B63D813b6Ef5b8",
    "transactionIndex": 1,
    "gasUsed": "912127",
    "logsBloom": "0x
    "blockHash": "0x2010d3c5a0c2e4c906190d205688a5b061cfc62a1ec48262ea95932c39a1564b",
    "transactionHash": "0xfad233e4cae802ca5e588ec20e5454c86e273f39b627382b149767976ed4e7cc",
    "logs": [],
    "blockNumber": 7960135,
    "cumulativeGasUsed": "933127",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "1a81a001d0f7c1e3da4f3a819bbcdfed",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"}],\"name\":\"addContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokensPricer\",\"outputs\":[{\"internalType\":\"contract PriceConsumerV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokensSolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:dev-run-script\":\"./scripts/deploy_with_ethers.ts\",\"details\":\"Given two tokens it solves address of the chainlink oracle\",\"kind\":\"dev\",\"methods\":{},\"title\":\"OracleSolver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OracleSolver.sol\":\"OracleSolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/OracleSolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./PriceConsumerV3.sol\\\";\\n\\n/**\\n * @title OracleSolver\\n * @dev Given two tokens it solves address of the chainlink oracle\\n * @custom:dev-run-script ./scripts/deploy_with_ethers.ts\\n */\\ncontract OracleSolver {\\n  mapping(bytes32 => address) public tokensSolver;\\n  mapping(bytes32 => PriceConsumerV3) public tokensPricer; //this should be private\\n\\n  function addContract(\\n    address tokenA,\\n    address tokenB,\\n    address solver\\n  ) public {\\n    require(tokenA != tokenB, \\\"OracleSolver: IDENTICAL_ADDRESSES\\\");\\n    require(getContractAddress(tokenA, tokenB) != address(0), \\\"OracleSolver: PAIR_EXISTS\\\");\\n    (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"OracleSolver: ZERO_ADDRESS\\\");\\n    bytes32 tokens = keccak256(abi.encodePacked(token0, token1));\\n    tokensPricer[tokens] = new PriceConsumerV3(solver);\\n    tokensSolver[tokens] = solver;\\n  }\\n\\n  function getContractAddress(address tokenA, address tokenB) public view returns (address) {\\n    require(tokenA != tokenB, \\\"OracleSolver: IDENTICAL_ADDRESSES\\\");\\n    (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    bytes32 tokens = keccak256(abi.encodePacked(token0, token1));\\n    return tokensSolver[tokens];\\n  }\\n\\n  function getContract(address tokenA, address tokenB) private view returns (PriceConsumerV3) {\\n    require(tokenA != tokenB, \\\"OracleSolver: IDENTICAL_ADDRESSES\\\");\\n    (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    bytes32 tokens = keccak256(abi.encodePacked(token0, token1));\\n    return tokensPricer[tokens];\\n  }\\n\\n  function getPrice(address tokenA, address tokenB) public view returns (int) {\\n    require(getContractAddress(tokenA, tokenB) != address(0), \\\"OracleSolver: PAIR_EXISTS\\\");\\n    return getContract(tokenA, tokenB).getLatestPrice();\\n  }\\n}\",\"keccak256\":\"0x49328e174684fac8f93a386dc047fd5f7bd75ff92cb53a9c265bf29b3614a6c0\",\"license\":\"GPL-3.0\"},\"contracts/PriceConsumerV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract PriceConsumerV3 {\\n\\n    AggregatorV3Interface internal priceFeed;\\n\\n    constructor(address solver) {\\n        priceFeed = AggregatorV3Interface(solver);\\n    }\\n\\n    /**\\n     * Returns the latest price\\n     */\\n    function getLatestPrice() public view returns (int) {\\n        (\\n            /*uint80 roundID*/,\\n            int price,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = priceFeed.latestRoundData();\\n        return price;\\n    }\\n}\",\"keccak256\":\"0x6f03c2cefdf80e82259ff81574f99535fddcd86fca67fe8652e436de53f9ad76\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610f99806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635dc1a9be1461005c578063a397f8821461008c578063ac41865a146100bc578063c190571b146100ec578063d860fd0e1461011c575b600080fd5b61007660048036038101906100719190610866565b610138565b6040516100839190610991565b60405180910390f35b6100a660048036038101906100a191906107db565b61016b565b6040516100b39190610991565b60405180910390f35b6100d660048036038101906100d191906107db565b61028b565b6040516100e391906109c7565b60405180910390f35b61010660048036038101906101019190610866565b610394565b60405161011391906109ac565b60405180910390f35b61013660048036038101906101319190610817565b6103c7565b005b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156101dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d3906109e2565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061021957838561021c565b84845b9150915060008282604051602001610235929190610965565b60405160208183030381529060405280519060200120905060008082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16935050505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff166102ae848461016b565b73ffffffffffffffffffffffffffffffffffffffff161415610305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fc90610a22565b60405180910390fd5b61030f838361066e565b73ffffffffffffffffffffffffffffffffffffffff16638e15f4736040518163ffffffff1660e01b815260040160206040518083038186803b15801561035457600080fd5b505afa158015610368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038c919061088f565b905092915050565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042d906109e2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16610458848461016b565b73ffffffffffffffffffffffffffffffffffffffff1614156104af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a690610a22565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106104ec5783856104ef565b84845b91509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055a90610a02565b60405180910390fd5b60008282604051602001610578929190610965565b6040516020818303038152906040528051906020012090508360405161059d9061078f565b6105a79190610991565b604051809103906000f0801580156105c3573d6000803e3d6000fd5b506001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d6906109e2565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061071c57838561071f565b84845b9150915060008282604051602001610738929190610965565b6040516020818303038152906040528051906020012090506001600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16935050505092915050565b61038f80610bd583390190565b6000813590506107ab81610b8f565b92915050565b6000813590506107c081610ba6565b92915050565b6000815190506107d581610bbd565b92915050565b600080604083850312156107ee57600080fd5b60006107fc8582860161079c565b925050602061080d8582860161079c565b9150509250929050565b60008060006060848603121561082c57600080fd5b600061083a8682870161079c565b935050602061084b8682870161079c565b925050604061085c8682870161079c565b9150509250925092565b60006020828403121561087857600080fd5b6000610886848285016107b1565b91505092915050565b6000602082840312156108a157600080fd5b60006108af848285016107c6565b91505092915050565b6108c181610a53565b82525050565b6108d86108d382610a53565b610abd565b82525050565b6108e781610a99565b82525050565b6108f681610a6f565b82525050565b6000610909602183610a42565b915061091482610aee565b604082019050919050565b600061092c601a83610a42565b915061093782610b3d565b602082019050919050565b600061094f601983610a42565b915061095a82610b66565b602082019050919050565b600061097182856108c7565b60148201915061098182846108c7565b6014820191508190509392505050565b60006020820190506109a660008301846108b8565b92915050565b60006020820190506109c160008301846108de565b92915050565b60006020820190506109dc60008301846108ed565b92915050565b600060208201905081810360008301526109fb816108fc565b9050919050565b60006020820190508181036000830152610a1b8161091f565b9050919050565b60006020820190508181036000830152610a3b81610942565b9050919050565b600082825260208201905092915050565b6000610a5e82610a79565b9050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aa482610aab565b9050919050565b6000610ab682610a79565b9050919050565b6000610ac882610acf565b9050919050565b6000610ada82610ae1565b9050919050565b60008160601b9050919050565b7f4f7261636c65536f6c7665723a204944454e544943414c5f414444524553534560008201527f5300000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f7261636c65536f6c7665723a205a45524f5f41444452455353000000000000600082015250565b7f4f7261636c65536f6c7665723a20504149525f45584953545300000000000000600082015250565b610b9881610a53565b8114610ba357600080fd5b50565b610baf81610a65565b8114610bba57600080fd5b50565b610bc681610a6f565b8114610bd157600080fd5b5056fe608060405234801561001057600080fd5b5060405161038f38038061038f8339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b6102818061010e6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638e15f47314610030575b600080fd5b61003861004e565b60405161004591906101c1565b60405180910390f35b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156100b757600080fd5b505afa1580156100cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ef919061013b565b5050509150508091505090565b60008151905061010b81610206565b92915050565b6000815190506101208161021d565b92915050565b60008151905061013581610234565b92915050565b600080600080600060a0868803121561015357600080fd5b600061016188828901610126565b9550506020610172888289016100fc565b945050604061018388828901610111565b935050606061019488828901610111565b92505060806101a588828901610126565b9150509295509295909350565b6101bb816101dc565b82525050565b60006020820190506101d660008301846101b2565b92915050565b6000819050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b61020f816101dc565b811461021a57600080fd5b50565b610226816101e6565b811461023157600080fd5b50565b61023d816101f0565b811461024857600080fd5b5056fea2646970667358221220b094a3a16228dc199e9bce48aea10a84f2031eeae28a8b0568353bcb9ba0057364736f6c63430008040033a2646970667358221220c06f36f290bc7dbfbf7bd9c1bdcd179076fb94d4c7a380c2b87561b20015ef4564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80635dc1a9be1461005c578063a397f8821461008c578063ac41865a146100bc578063c190571b146100ec578063d860fd0e1461011c575b600080fd5b61007660048036038101906100719190610866565b610138565b6040516100839190610991565b60405180910390f35b6100a660048036038101906100a191906107db565b61016b565b6040516100b39190610991565b60405180910390f35b6100d660048036038101906100d191906107db565b61028b565b6040516100e391906109c7565b60405180910390f35b61010660048036038101906101019190610866565b610394565b60405161011391906109ac565b60405180910390f35b61013660048036038101906101319190610817565b6103c7565b005b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156101dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d3906109e2565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061021957838561021c565b84845b9150915060008282604051602001610235929190610965565b60405160208183030381529060405280519060200120905060008082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16935050505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff166102ae848461016b565b73ffffffffffffffffffffffffffffffffffffffff161415610305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fc90610a22565b60405180910390fd5b61030f838361066e565b73ffffffffffffffffffffffffffffffffffffffff16638e15f4736040518163ffffffff1660e01b815260040160206040518083038186803b15801561035457600080fd5b505afa158015610368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038c919061088f565b905092915050565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042d906109e2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16610458848461016b565b73ffffffffffffffffffffffffffffffffffffffff1614156104af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a690610a22565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106104ec5783856104ef565b84845b91509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055a90610a02565b60405180910390fd5b60008282604051602001610578929190610965565b6040516020818303038152906040528051906020012090508360405161059d9061078f565b6105a79190610991565b604051809103906000f0801580156105c3573d6000803e3d6000fd5b506001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d6906109e2565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061071c57838561071f565b84845b9150915060008282604051602001610738929190610965565b6040516020818303038152906040528051906020012090506001600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16935050505092915050565b61038f80610bd583390190565b6000813590506107ab81610b8f565b92915050565b6000813590506107c081610ba6565b92915050565b6000815190506107d581610bbd565b92915050565b600080604083850312156107ee57600080fd5b60006107fc8582860161079c565b925050602061080d8582860161079c565b9150509250929050565b60008060006060848603121561082c57600080fd5b600061083a8682870161079c565b935050602061084b8682870161079c565b925050604061085c8682870161079c565b9150509250925092565b60006020828403121561087857600080fd5b6000610886848285016107b1565b91505092915050565b6000602082840312156108a157600080fd5b60006108af848285016107c6565b91505092915050565b6108c181610a53565b82525050565b6108d86108d382610a53565b610abd565b82525050565b6108e781610a99565b82525050565b6108f681610a6f565b82525050565b6000610909602183610a42565b915061091482610aee565b604082019050919050565b600061092c601a83610a42565b915061093782610b3d565b602082019050919050565b600061094f601983610a42565b915061095a82610b66565b602082019050919050565b600061097182856108c7565b60148201915061098182846108c7565b6014820191508190509392505050565b60006020820190506109a660008301846108b8565b92915050565b60006020820190506109c160008301846108de565b92915050565b60006020820190506109dc60008301846108ed565b92915050565b600060208201905081810360008301526109fb816108fc565b9050919050565b60006020820190508181036000830152610a1b8161091f565b9050919050565b60006020820190508181036000830152610a3b81610942565b9050919050565b600082825260208201905092915050565b6000610a5e82610a79565b9050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aa482610aab565b9050919050565b6000610ab682610a79565b9050919050565b6000610ac882610acf565b9050919050565b6000610ada82610ae1565b9050919050565b60008160601b9050919050565b7f4f7261636c65536f6c7665723a204944454e544943414c5f414444524553534560008201527f5300000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f7261636c65536f6c7665723a205a45524f5f41444452455353000000000000600082015250565b7f4f7261636c65536f6c7665723a20504149525f45584953545300000000000000600082015250565b610b9881610a53565b8114610ba357600080fd5b50565b610baf81610a65565b8114610bba57600080fd5b50565b610bc681610a6f565b8114610bd157600080fd5b5056fe608060405234801561001057600080fd5b5060405161038f38038061038f8339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b6102818061010e6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638e15f47314610030575b600080fd5b61003861004e565b60405161004591906101c1565b60405180910390f35b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156100b757600080fd5b505afa1580156100cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ef919061013b565b5050509150508091505090565b60008151905061010b81610206565b92915050565b6000815190506101208161021d565b92915050565b60008151905061013581610234565b92915050565b600080600080600060a0868803121561015357600080fd5b600061016188828901610126565b9550506020610172888289016100fc565b945050604061018388828901610111565b935050606061019488828901610111565b92505060806101a588828901610126565b9150509295509295909350565b6101bb816101dc565b82525050565b60006020820190506101d660008301846101b2565b92915050565b6000819050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b61020f816101dc565b811461021a57600080fd5b50565b610226816101e6565b811461023157600080fd5b50565b61023d816101f0565b811461024857600080fd5b5056fea2646970667358221220b094a3a16228dc199e9bce48aea10a84f2031eeae28a8b0568353bcb9ba0057364736f6c63430008040033a2646970667358221220c06f36f290bc7dbfbf7bd9c1bdcd179076fb94d4c7a380c2b87561b20015ef4564736f6c63430008040033",
  "devdoc": {
    "custom:dev-run-script": "./scripts/deploy_with_ethers.ts",
    "details": "Given two tokens it solves address of the chainlink oracle",
    "kind": "dev",
    "methods": {},
    "title": "OracleSolver",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/OracleSolver.sol:OracleSolver",
        "label": "tokensSolver",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 58,
        "contract": "contracts/OracleSolver.sol:OracleSolver",
        "label": "tokensPricer",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_contract(PriceConsumerV3)297)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(PriceConsumerV3)297": {
        "encoding": "inplace",
        "label": "contract PriceConsumerV3",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_contract(PriceConsumerV3)297)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract PriceConsumerV3)",
        "numberOfBytes": "32",
        "value": "t_contract(PriceConsumerV3)297"
      }
    }
  }
}
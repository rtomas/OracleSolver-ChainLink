{
  "language": "Solidity",
  "sources": {
    "contracts/PriceConsumerV3.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.4;\n\n/**\n * @title OracleSolver\n * @dev Given two tokens it solves address of the chainlink oracle\n * @custom:dev-run-script ./scripts/deploy_with_ethers.ts\n */\ncontract OracleSolver {\n  mapping(bytes32 => address) public tokensToSolver; //this should be private\n  address[] public solvers;\n\n  function addContract(\n    address tokenA,\n    address tokenB,\n    address solver\n  ) public {\n    require(tokenA != tokenB, \"OracleSolver: IDENTICAL_ADDRESSES\");\n    require(getContract(tokenA, tokenB) != address(0), \"OractleSolver: PAIR_EXISTS\");\n    (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    require(token0 != address(0), \"OracleSolver: ZERO_ADDRESS\");\n    bytes32 tokens = keccak256(abi.encodePacked(token0, token1));\n    tokensToSolver[tokens] = solver;\n    solvers.push(solver);\n  }\n\n  function getContract(address tokenA, address tokenB) public view returns (address) {\n    require(tokenA != tokenB, \"OracleSolver: IDENTICAL_ADDRESSES\");\n    (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    bytes32 tokens = keccak256(abi.encodePacked(token0, token1));\n    return tokensToSolver[tokens];\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
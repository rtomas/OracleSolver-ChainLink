{
  "address": "0x051ee8118324EB76c4b54A960Cb53d8cC1B79c89",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "IdenticalAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "PairExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "PairNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "solver",
          "type": "address"
        }
      ],
      "name": "addContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getContractSolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "tokensPricer",
      "outputs": [
        {
          "internalType": "contract PriceConsumerV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "tokensSolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc0c0f2d18ced7897f4d0f7f7c73337ec4bc3583f4366c4a4abfaaad52abaf11a",
  "receipt": {
    "to": null,
    "from": "0xcbBf0E57fe2fB1877f18f84990691ab9E23043C9",
    "contractAddress": "0x051ee8118324EB76c4b54A960Cb53d8cC1B79c89",
    "transactionIndex": 19,
    "gasUsed": "1033906",
    "logsBloom": "0x
    "blockHash": "0x29e8cb3be8c13aa8635fdc9ea29b0c3f0472330a5175c89c1564ccf6fac859ec",
    "transactionHash": "0xc0c0f2d18ced7897f4d0f7f7c73337ec4bc3583f4366c4a4abfaaad52abaf11a",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 29199045,
        "transactionHash": "0xc0c0f2d18ced7897f4d0f7f7c73337ec4bc3583f4366c4a4abfaaad52abaf11a",
        "address": "0x051ee8118324EB76c4b54A960Cb53d8cC1B79c89",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cbbf0e57fe2fb1877f18f84990691ab9e23043c9"
        ],
        "data": "0x",
        "logIndex": 66,
        "blockHash": "0x29e8cb3be8c13aa8635fdc9ea29b0c3f0472330a5175c89c1564ccf6fac859ec"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 29199045,
        "transactionHash": "0xc0c0f2d18ced7897f4d0f7f7c73337ec4bc3583f4366c4a4abfaaad52abaf11a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cbbf0e57fe2fb1877f18f84990691ab9e23043c9",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000004c66e7eb5d17c00000000000000000000000000000000000000000000000006e9161f29b71bb3000000000000000000000000000000000000000000000aea33443d5496bf656500000000000000000000000000000000000000000000000006e44fb0ab014a37000000000000000000000000000000000000000000000aea334903c3157536e1",
        "logIndex": 67,
        "blockHash": "0x29e8cb3be8c13aa8635fdc9ea29b0c3f0472330a5175c89c1564ccf6fac859ec"
      }
    ],
    "blockNumber": 29199045,
    "cumulativeGasUsed": "6016581",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7cb8b76c1b242de404ec229ee728513d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"IdenticalAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PairExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PairNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"}],\"name\":\"addContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getContractSolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokensPricer\",\"outputs\":[{\"internalType\":\"contract PriceConsumerV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokensSolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:dev-run-script\":\"./scripts/deploy_with_ethers.ts\",\"details\":\"Given two tokens it solves address of the chainlink oracle\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"OracleSolver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OracleSolver.sol\":\"OracleSolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/OracleSolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./PriceConsumerV3.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title OracleSolver\\n * @dev Given two tokens it solves address of the chainlink oracle\\n * @custom:dev-run-script ./scripts/deploy_with_ethers.ts\\n */\\ncontract OracleSolver is Ownable {\\n  mapping(bytes32 => address) public tokensSolver;\\n  mapping(bytes32 => PriceConsumerV3) public tokensPricer; //this should be private\\n\\n  error IdenticalAddress(address);\\n  error PairExist(address, address, address);\\n  error ZeroAddress(address);\\n  error PairNotExist(address, address);\\n\\n  function addContract(\\n    address tokenA,\\n    address tokenB,\\n    address solver\\n  ) public onlyOwner {\\n    address pairContract = getContractSolver(tokenA, tokenB);\\n    if (pairContract != address(0)) revert PairExist(tokenA, tokenB, pairContract);\\n\\n    bytes32 tokens = generateTokensBytes(tokenA, tokenB);\\n\\n    tokensPricer[tokens] = new PriceConsumerV3(solver); // create a new solver contract\\n    tokensSolver[tokens] = solver;\\n  }\\n\\n  function getContractSolver(address tokenA, address tokenB) public view returns (address) {\\n    if (tokenA == tokenB) revert IdenticalAddress(tokenA);\\n\\n    bytes32 tokens = generateTokensBytes(tokenA, tokenB);\\n    return tokensSolver[tokens];\\n  }\\n\\n  function getContractConsumer(address tokenA, address tokenB) private view returns (PriceConsumerV3) {\\n    if (tokenA == tokenB) revert IdenticalAddress(tokenA);\\n\\n    bytes32 tokens = generateTokensBytes(tokenA, tokenB);\\n    return tokensPricer[tokens];\\n  }\\n\\n  function getPrice(address tokenA, address tokenB) public view returns (int256) {\\n    address pairContract = getContractSolver(tokenA, tokenB);\\n    if (pairContract == address(0)) revert PairNotExist(tokenA, tokenB);\\n\\n    return getContractConsumer(tokenA, tokenB).getLatestPrice();\\n  }\\n\\n  function orderAddress(address tokenA, address tokenB) private pure returns (address, address) {\\n    return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n  }\\n\\n  function generateTokensBytes(address tokenA, address tokenB) private pure returns (bytes32) {\\n    (address token0, address token1) = orderAddress(tokenA, tokenB);\\n    if (token0 == address(0)) revert ZeroAddress(token0);\\n\\n    return keccak256(abi.encodePacked(token0, token1));\\n  }\\n}\\n\",\"keccak256\":\"0x33219de3819f71b3fd6d20b9c616395d4cf417b630dde2b064c25db87a591578\",\"license\":\"GPL-3.0\"},\"contracts/PriceConsumerV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract PriceConsumerV3 {\\n\\n    AggregatorV3Interface internal priceFeed;\\n\\n    constructor(address solver) {\\n        priceFeed = AggregatorV3Interface(solver);\\n    }\\n\\n    /**\\n     * Returns the latest price\\n     */\\n    function getLatestPrice() public view returns (int) {\\n        (\\n            /*uint80 roundID*/,\\n            int price,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = priceFeed.latestRoundData();\\n        return price;\\n    }\\n}\",\"keccak256\":\"0x6f03c2cefdf80e82259ff81574f99535fddcd86fca67fe8652e436de53f9ad76\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61114e8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b195436c1161005b578063b195436c14610115578063c190571b14610145578063d860fd0e14610175578063f2fde38b1461019157610088565b80635dc1a9be1461008d578063715018a6146100bd5780638da5cb5b146100c7578063ac41865a146100e5575b600080fd5b6100a760048036038101906100a29190610a27565b6101ad565b6040516100b49190610b2f565b60405180910390f35b6100c56101e0565b005b6100cf6101f4565b6040516100dc9190610b2f565b60405180910390f35b6100ff60048036038101906100fa919061099c565b61021d565b60405161010c9190610bc5565b60405180910390f35b61012f600480360381019061012a919061099c565b610330565b60405161013c9190610b2f565b60405180910390f35b61015f600480360381019061015a9190610a27565b6103ee565b60405161016c9190610baa565b60405180910390f35b61018f600480360381019061018a91906109d8565b610421565b005b6101ab60048036038101906101a69190610973565b610598565b005b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101e861061c565b6101f2600061069a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008061022a8484610330565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102a05783836040517f06f48e3b000000000000000000000000000000000000000000000000000000008152600401610297929190610b4a565b60405180910390fd5b6102aa848461075e565b73ffffffffffffffffffffffffffffffffffffffff16638e15f4736040518163ffffffff1660e01b815260040160206040518083038186803b1580156102ef57600080fd5b505afa158015610303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103279190610a50565b91505092915050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156103a357826040517f6d303fa600000000000000000000000000000000000000000000000000000000815260040161039a9190610b2f565b60405180910390fd5b60006103af848461081c565b90506001600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505092915050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61042961061c565b60006104358484610330565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146104ac578383826040517fea061f900000000000000000000000000000000000000000000000000000000081526004016104a393929190610b73565b60405180910390fd5b60006104b8858561081c565b9050826040516104c790610927565b6104d19190610b2f565b604051809103906000f0801580156104ed573d6000803e3d6000fd5b506002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6105a061061c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610610576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060790610be0565b60405180910390fd5b6106198161069a565b50565b6106246108d4565b73ffffffffffffffffffffffffffffffffffffffff166106426101f4565b73ffffffffffffffffffffffffffffffffffffffff1614610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068f90610c00565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107d157826040517f6d303fa60000000000000000000000000000000000000000000000000000000081526004016107c89190610b2f565b60405180910390fd5b60006107dd848461081c565b90506002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505092915050565b600080600061082b85856108dc565b91509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108a157816040517fc80b88340000000000000000000000000000000000000000000000000000000081526004016108989190610b2f565b60405180910390fd5b81816040516020016108b4929190610b03565b604051602081830303815290604052805190602001209250505092915050565b600033905090565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161061091957828461091c565b83835b915091509250929050565b61038f80610d8a83390190565b60008135905061094381610d44565b92915050565b60008135905061095881610d5b565b92915050565b60008151905061096d81610d72565b92915050565b60006020828403121561098557600080fd5b600061099384828501610934565b91505092915050565b600080604083850312156109af57600080fd5b60006109bd85828601610934565b92505060206109ce85828601610934565b9150509250929050565b6000806000606084860312156109ed57600080fd5b60006109fb86828701610934565b9350506020610a0c86828701610934565b9250506040610a1d86828701610934565b9150509250925092565b600060208284031215610a3957600080fd5b6000610a4784828501610949565b91505092915050565b600060208284031215610a6257600080fd5b6000610a708482850161095e565b91505092915050565b610a8281610c31565b82525050565b610a99610a9482610c31565b610c9b565b82525050565b610aa881610c77565b82525050565b610ab781610c4d565b82525050565b6000610aca602683610c20565b9150610ad582610ccc565b604082019050919050565b6000610aed602083610c20565b9150610af882610d1b565b602082019050919050565b6000610b0f8285610a88565b601482019150610b1f8284610a88565b6014820191508190509392505050565b6000602082019050610b446000830184610a79565b92915050565b6000604082019050610b5f6000830185610a79565b610b6c6020830184610a79565b9392505050565b6000606082019050610b886000830186610a79565b610b956020830185610a79565b610ba26040830184610a79565b949350505050565b6000602082019050610bbf6000830184610a9f565b92915050565b6000602082019050610bda6000830184610aae565b92915050565b60006020820190508181036000830152610bf981610abd565b9050919050565b60006020820190508181036000830152610c1981610ae0565b9050919050565b600082825260208201905092915050565b6000610c3c82610c57565b9050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c8282610c89565b9050919050565b6000610c9482610c57565b9050919050565b6000610ca682610cad565b9050919050565b6000610cb882610cbf565b9050919050565b60008160601b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610d4d81610c31565b8114610d5857600080fd5b50565b610d6481610c43565b8114610d6f57600080fd5b50565b610d7b81610c4d565b8114610d8657600080fd5b5056fe608060405234801561001057600080fd5b5060405161038f38038061038f8339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b6102818061010e6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638e15f47314610030575b600080fd5b61003861004e565b60405161004591906101c1565b60405180910390f35b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156100b757600080fd5b505afa1580156100cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ef919061013b565b5050509150508091505090565b60008151905061010b81610206565b92915050565b6000815190506101208161021d565b92915050565b60008151905061013581610234565b92915050565b600080600080600060a0868803121561015357600080fd5b600061016188828901610126565b9550506020610172888289016100fc565b945050604061018388828901610111565b935050606061019488828901610111565b92505060806101a588828901610126565b9150509295509295909350565b6101bb816101dc565b82525050565b60006020820190506101d660008301846101b2565b92915050565b6000819050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b61020f816101dc565b811461021a57600080fd5b50565b610226816101e6565b811461023157600080fd5b50565b61023d816101f0565b811461024857600080fd5b5056fea2646970667358221220b094a3a16228dc199e9bce48aea10a84f2031eeae28a8b0568353bcb9ba0057364736f6c63430008040033a2646970667358221220cc1233b009b56e2f48c511cbd62b7b4c346aedf6c946aaa376321685c5c3fb7564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063b195436c1161005b578063b195436c14610115578063c190571b14610145578063d860fd0e14610175578063f2fde38b1461019157610088565b80635dc1a9be1461008d578063715018a6146100bd5780638da5cb5b146100c7578063ac41865a146100e5575b600080fd5b6100a760048036038101906100a29190610a27565b6101ad565b6040516100b49190610b2f565b60405180910390f35b6100c56101e0565b005b6100cf6101f4565b6040516100dc9190610b2f565b60405180910390f35b6100ff60048036038101906100fa919061099c565b61021d565b60405161010c9190610bc5565b60405180910390f35b61012f600480360381019061012a919061099c565b610330565b60405161013c9190610b2f565b60405180910390f35b61015f600480360381019061015a9190610a27565b6103ee565b60405161016c9190610baa565b60405180910390f35b61018f600480360381019061018a91906109d8565b610421565b005b6101ab60048036038101906101a69190610973565b610598565b005b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101e861061c565b6101f2600061069a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008061022a8484610330565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102a05783836040517f06f48e3b000000000000000000000000000000000000000000000000000000008152600401610297929190610b4a565b60405180910390fd5b6102aa848461075e565b73ffffffffffffffffffffffffffffffffffffffff16638e15f4736040518163ffffffff1660e01b815260040160206040518083038186803b1580156102ef57600080fd5b505afa158015610303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103279190610a50565b91505092915050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156103a357826040517f6d303fa600000000000000000000000000000000000000000000000000000000815260040161039a9190610b2f565b60405180910390fd5b60006103af848461081c565b90506001600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505092915050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61042961061c565b60006104358484610330565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146104ac578383826040517fea061f900000000000000000000000000000000000000000000000000000000081526004016104a393929190610b73565b60405180910390fd5b60006104b8858561081c565b9050826040516104c790610927565b6104d19190610b2f565b604051809103906000f0801580156104ed573d6000803e3d6000fd5b506002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6105a061061c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610610576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060790610be0565b60405180910390fd5b6106198161069a565b50565b6106246108d4565b73ffffffffffffffffffffffffffffffffffffffff166106426101f4565b73ffffffffffffffffffffffffffffffffffffffff1614610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068f90610c00565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107d157826040517f6d303fa60000000000000000000000000000000000000000000000000000000081526004016107c89190610b2f565b60405180910390fd5b60006107dd848461081c565b90506002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505092915050565b600080600061082b85856108dc565b91509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108a157816040517fc80b88340000000000000000000000000000000000000000000000000000000081526004016108989190610b2f565b60405180910390fd5b81816040516020016108b4929190610b03565b604051602081830303815290604052805190602001209250505092915050565b600033905090565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161061091957828461091c565b83835b915091509250929050565b61038f80610d8a83390190565b60008135905061094381610d44565b92915050565b60008135905061095881610d5b565b92915050565b60008151905061096d81610d72565b92915050565b60006020828403121561098557600080fd5b600061099384828501610934565b91505092915050565b600080604083850312156109af57600080fd5b60006109bd85828601610934565b92505060206109ce85828601610934565b9150509250929050565b6000806000606084860312156109ed57600080fd5b60006109fb86828701610934565b9350506020610a0c86828701610934565b9250506040610a1d86828701610934565b9150509250925092565b600060208284031215610a3957600080fd5b6000610a4784828501610949565b91505092915050565b600060208284031215610a6257600080fd5b6000610a708482850161095e565b91505092915050565b610a8281610c31565b82525050565b610a99610a9482610c31565b610c9b565b82525050565b610aa881610c77565b82525050565b610ab781610c4d565b82525050565b6000610aca602683610c20565b9150610ad582610ccc565b604082019050919050565b6000610aed602083610c20565b9150610af882610d1b565b602082019050919050565b6000610b0f8285610a88565b601482019150610b1f8284610a88565b6014820191508190509392505050565b6000602082019050610b446000830184610a79565b92915050565b6000604082019050610b5f6000830185610a79565b610b6c6020830184610a79565b9392505050565b6000606082019050610b886000830186610a79565b610b956020830185610a79565b610ba26040830184610a79565b949350505050565b6000602082019050610bbf6000830184610a9f565b92915050565b6000602082019050610bda6000830184610aae565b92915050565b60006020820190508181036000830152610bf981610abd565b9050919050565b60006020820190508181036000830152610c1981610ae0565b9050919050565b600082825260208201905092915050565b6000610c3c82610c57565b9050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c8282610c89565b9050919050565b6000610c9482610c57565b9050919050565b6000610ca682610cad565b9050919050565b6000610cb882610cbf565b9050919050565b60008160601b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610d4d81610c31565b8114610d5857600080fd5b50565b610d6481610c43565b8114610d6f57600080fd5b50565b610d7b81610c4d565b8114610d8657600080fd5b5056fe608060405234801561001057600080fd5b5060405161038f38038061038f8339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b6102818061010e6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638e15f47314610030575b600080fd5b61003861004e565b60405161004591906101c1565b60405180910390f35b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156100b757600080fd5b505afa1580156100cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ef919061013b565b5050509150508091505090565b60008151905061010b81610206565b92915050565b6000815190506101208161021d565b92915050565b60008151905061013581610234565b92915050565b600080600080600060a0868803121561015357600080fd5b600061016188828901610126565b9550506020610172888289016100fc565b945050604061018388828901610111565b935050606061019488828901610111565b92505060806101a588828901610126565b9150509295509295909350565b6101bb816101dc565b82525050565b60006020820190506101d660008301846101b2565b92915050565b6000819050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b61020f816101dc565b811461021a57600080fd5b50565b610226816101e6565b811461023157600080fd5b50565b61023d816101f0565b811461024857600080fd5b5056fea2646970667358221220b094a3a16228dc199e9bce48aea10a84f2031eeae28a8b0568353bcb9ba0057364736f6c63430008040033a2646970667358221220cc1233b009b56e2f48c511cbd62b7b4c346aedf6c946aaa376321685c5c3fb7564736f6c63430008040033",
  "devdoc": {
    "custom:dev-run-script": "./scripts/deploy_with_ethers.ts",
    "details": "Given two tokens it solves address of the chainlink oracle",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "OracleSolver",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/OracleSolver.sol:OracleSolver",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 191,
        "contract": "contracts/OracleSolver.sol:OracleSolver",
        "label": "tokensSolver",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 196,
        "contract": "contracts/OracleSolver.sol:OracleSolver",
        "label": "tokensPricer",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_contract(PriceConsumerV3)464)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(PriceConsumerV3)464": {
        "encoding": "inplace",
        "label": "contract PriceConsumerV3",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_contract(PriceConsumerV3)464)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract PriceConsumerV3)",
        "numberOfBytes": "32",
        "value": "t_contract(PriceConsumerV3)464"
      }
    }
  }
}